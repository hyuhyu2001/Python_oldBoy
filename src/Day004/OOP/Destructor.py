#!/user/bin/env python
#encoding:utf-8

'''
Destructor析构函数和特殊的__call__方法
特殊的__init__方法和__call__方法
__init__方式是构造函数，析构函数和构造函数是对立的
对象创建后，总有对象销毁的时候（对象没有别人在用，便会销毁，防止内存泄露），python解释器会解析对象有没有人用，没人用便会销毁

__del__析构函数：对象在销毁的时候，想做点什么事情，便会写析构函数，

析构函数是类在释放时执行清理工作的地方，清理过程主要包含两个部分
一是系统自动执行的部分，其机制是先调用基类的析构函数，让基类清除自己的资源，再调用类内部包含的对象的析构函数，
其中这两种调用过程都是递归进行的，直到最顶层的类；
还有一种是由用户代码执行清理的，这种往往是用户自己管理的资源，如动态申请的内存，系统的文件句柄，网络端口等。


'''
import time

class Foo:
    def __init__(self):
        pass
    
    def __del__(self):
        print '解释器要销毁我了，我要做最后一次的呐喊'
    
    def Go(self):
        print 'Go'
        
    def __call__(self):
        print 'call'


f1 = Foo() #执行__init__函数

f1.Go()  #常规对象调用方法：对象+点

time.sleep(10)  #等待10秒再执行，确认最后才执行__del__函数

f1()  #调用对象后面再加小括号，默认去执行类的call方法


#__del__函数永远是最后执行，因为是在销毁时执行
#__call__什么时候用？只是调用方式不同，想什么时候用就什么时候用，Django入口就是用的call函数

