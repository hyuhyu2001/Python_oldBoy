#!/user/bin/env python
#encoding:utf-8

'''
为什么要用静态方法？
'''

#静态方法什么时候用？比如访问数据库可以有增删改查，业务方可以操作N多个表，有调用增删改查的N多业务方法
#每个业务，均对应各种增删改查操作
#业务1想用增删改查的话,如果业务2用其他方法，会每个业务都去创建对象，这时内存会开辟空间
#通过一个对象，就全部处理了，不用对象访问，通过类访问即可

#使用动态方法
class MsSqlHelper:
    def add(self,sql):
        pass
    def delete(self,sql):
        pass
    def update(self,sql):
        self.Sql=sql
    def select(self,sql):
        pass
 
#需要创建N多个对象   
ms = MsSqlHelper()
ms.update


#使用静态方法
class MsSqlHelper1:
    
    @staticmethod
    def add(sql):
        pass
    @staticmethod
    def delete(sql):
        pass
    @staticmethod
    def update(sql):
        pass
    @staticmethod
    def select(sql):
        pass
    
#业务方只需要调用类即可,不用每个业务都去创建对象
#虽然也进行一万次操作，但是不需要创建对象的操作（实例化类），会节省创建对象的空间

#面向对象编程
MsSqlHelper1.add()
#静态方法逻辑上属于类，但方法和外面的方法一样，只是给了一个从属的关系，从逻辑上调用，但知道属于哪个类
#python刚开始是模块化思想（模块化编程），初始化没有面向对象编程的概念，后面再出来静态方法，静态方法会在单独一个地方占有内存
#调用方式就是一个鸡肋，是两种思想的碰撞
#多态，把一堆相似的东西包装在一个文件里，把另一堆相似的对象包装在另一个文件（面向对象存在唯一的核心优势，避免代码冗余）
#java属于强制类型语言
#python的模块化编程是非常强大的：反射+模块化编程 = 面向对象编程，可以选对象编程（java和c是面向对象），可以选模块化编程
#建议面向对象编程：面向对象使代码扩展容易，简化代码的编写
#面向对象使干一件事（先思考怎么做），面向对象帮助你在逻辑上走通，软件已经构思出来了，先想好怎么构造类：分成小模块，分成小类
#代码超过几百行，最好想一下怎么实现
#函数式编程是面向过程，干一步走一步，然后接着干，面向过程会写一半，突然发现走不通
#函数式编程不能创建模板，面向对象编程可以创建模板（比如省），最好的方式：面向过程+面向对象

#为什么不通过函数式编程的方式去做？面向对象编程和函数式编程的区别
#函数式编程如下
#很多类很难划分的，都是在写程序时，写着写着才会划分出来类
def add(sql):
    
    